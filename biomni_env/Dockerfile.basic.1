# Biomni Basic Environment Dockerfile - 优化版
# 快速部署基础AI代理环境，使用国内镜像源

FROM ubuntu:22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PATH="/opt/biomni_tools/bin:$PATH"
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# 设置工作目录
WORKDIR /opt/biomni

# 配置国内APT镜像源  # 基础镜像根本没有这个文件，所以不需要配置
#RUN sed -i 's@deb.debian.org@mirrors.tuna.tsinghua.edu.cn@g' /etc/apt/sources.list && \
#    sed -i 's@security.debian.org@mirrors.tuna.tsinghua.edu.cn@g' /etc/apt/sources.list

# 安装系统依赖 - 合并为单个RUN命令
RUN apt-get update && apt-get install -y --no-install-recommends \
    # 基础工具
    wget curl git vim nano ca-certificates \
    # Python环境
    python3 python3-pip python3-dev \
    # 编译环境
    build-essential gcc g++ make cmake \
    # 系统依赖
    jq unzip zip bzip2 gzip xz-utils \
    # 科学计算依赖
    libz-dev libbz2-dev liblzma-dev \
    libcurl4-openssl-dev libssl-dev \
    libxml2-dev libpng-dev libjpeg-dev \
    libfreetype6-dev libtiff5-dev \
    libblas-dev liblapack-dev libgsl-dev \
    pkg-config libsentencepiece-dev \
    # 清理缓存
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# 安装Miniconda - 使用官方源
RUN wget -qO /tmp/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    bash /tmp/miniconda.sh -b -p /opt/miniconda3 && \
    rm /tmp/miniconda.sh && \
    # 配置官方conda源
    /opt/miniconda3/bin/conda config --add channels https://repo.anaconda.com/pkgs/main && \
    /opt/miniconda3/bin/conda config --add channels https://repo.anaconda.com/pkgs/free && \
    /opt/miniconda3/bin/conda config --add channels https://repo.anaconda.com/pkgs/r && \
    /opt/miniconda3/bin/conda config --add channels https://repo.anaconda.com/pkgs/msys2 && \
    /opt/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main && \
    /opt/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r && \
    /opt/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/msys2 && \
    /opt/miniconda3/bin/conda config --add channels conda-forge && \
    /opt/miniconda3/bin/conda config --set show_channel_urls yes && \
    /opt/miniconda3/bin/conda clean -afy

# 安装pyyaml用于解析yml
RUN pip3 install pyyaml 

# 创建biomni用户
RUN useradd -u 1005 -m -s /bin/bash biomni && \
    chown -R biomni:biomni /opt/biomni /opt/miniconda3
# 切换到biomni用户
USER biomni

# 复制pip配置文件
COPY pip.conf /opt/biomni/

# 配置pip以支持更长的超时和重试
RUN mkdir -p /opt/miniconda3/pip && \
    cp /opt/biomni/pip.conf /opt/miniconda3/pip/pip.conf && \
    mkdir -p /home/biomni/.pip && \
    cp /opt/biomni/pip.conf /home/biomni/.pip/pip.conf && \
    echo 'export PIP_CONFIG_FILE=/opt/miniconda3/pip/pip.conf' >> /opt/miniconda3/etc/profile.d/conda.sh

# 复制原始 environment.yml
COPY environment.yml ./

# 自动生成 requirements.base.txt、requirements.txt 和 environment.conda.yml
RUN cat <<EOF > split_env.py
import yaml

# 基础包列表（预先安装的包）
base_packages = [
    'numpy==2.1', 'pandas', 'matplotlib', 'scipy', 'statsmodels', 'scikit-learn',
    'gradio', 'langchain', 'langgraph==0.3.18', 'langchain_openai', 'langchain_anthropic',
    'langchain_community', 'langchain-google-genai', 'langchain_ollama', 'openai',
    'beautifulsoup4', 'lxml', 'tqdm', 'seaborn', 'networkx', 'requests', 'pyyaml',
    'jupyter', 'notebook', 'ipykernel', 'pytest', 'biopython'
]

# 读取 environment.yml
f = open('environment.yml')
d = yaml.safe_load(f)
f.close()

pip_list = []
new_deps = []

# 分离 conda 和 pip 依赖
for dep in d['dependencies']:
    if isinstance(dep, dict) and 'pip' in dep:
        pip_list.extend(dep['pip'])
    else:
        new_deps.append(dep)

# 将 pip 包分为基础包和额外包
extra_packages = []
base_packages_found = []

for pkg in pip_list:
    # 检查是否是基础包
    is_base = False
    for base_pkg in base_packages:
        # 处理版本号匹配
        if '==' in base_pkg:
            base_name = base_pkg.split('==')[0]
            if pkg.startswith(base_name + '==') or pkg == base_name:
                is_base = True
                base_packages_found.append(pkg)
                break
        else:
            if pkg.startswith(base_pkg + '==') or pkg == base_pkg:
                is_base = True
                base_packages_found.append(pkg)
                break
    
    if not is_base:
        extra_packages.append(pkg)

# 更新dependencies，只保留conda包
d['dependencies'] = new_deps

# 写入文件
open('requirements.base.txt', 'w').write('\n'.join(base_packages))
open('requirements.extra.txt', 'w').write('\n'.join(extra_packages))
open('environment.conda.yml', 'w').write(yaml.dump(d, sort_keys=False))

print(f"基础包数量: {len(base_packages)}")
print(f"基础包: {base_packages}")
print(f"在environment.yml中找到的基础包: {base_packages_found}")
print(f"额外包数量: {len(extra_packages)}")
print(f"额外包: {extra_packages}")
print("=== environment.conda.yml 内容 ===")
print(yaml.dump(d, sort_keys=False))
print("=== 原始 environment.yml 中的 conda 包 ===")
print(f"conda包: {new_deps}")
EOF
RUN python3 split_env.py && rm split_env.py

# 创建conda环境（只装conda包）
RUN /opt/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main && \
    /opt/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r && \
    /opt/miniconda3/bin/conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/msys2 && \
    /opt/miniconda3/bin/conda env create -n biomni_e1 -f environment.conda.yml && \
    /opt/miniconda3/bin/conda clean -afy

# 设置pip配置文件环境变量
ENV PIP_CONFIG_FILE=/opt/miniconda3/pip/pip.conf

# 直接使用环境中的pip - 确保使用pip.conf配置
# 之前用/opt/miniconda3/bin/conda run -n biomni_e1 pip install要启动两个多小时，现在直接用pip安装，几秒钟就开始安装了
# $(cat requirements.base.txt | grep -v '^#' | tr '\n' ' ') | -r requirements.base.txt
# $(cat requirements.extra.txt | grep -v '^#' | tr '\n' ' ') | -r requirements.extra.txt
# 原来langchain_aws是压死骆驼的最后一根稻草，不加它就快很多了
RUN /opt/miniconda3/envs/biomni_e1/bin/pip config list && \
    /opt/miniconda3/envs/biomni_e1/bin/pip install --upgrade pip setuptools wheel && \
    cat requirements.base.txt && \
    echo "" && \
    /opt/miniconda3/envs/biomni_e1/bin/pip install -r requirements.base.txt

# 哪怕你前面全装好了，还是不能用-r requirements.txt，每个包依旧会下载好多个版本，Installing build dependencies还是消耗很长时间。
RUN cat requirements.extra.txt && \
    echo "" && \
    /opt/miniconda3/envs/biomni_e1/bin/pip install -r requirements.extra.txt

# 设置环境变量
ENV PATH="/opt/miniconda3/envs/biomni_e1/bin:$PATH"
ENV CONDA_DEFAULT_ENV="biomni_e1"

# 暴露Jupyter和Gradio端口
EXPOSE 8888 7860

# 默认命令
CMD ["/bin/bash"] 